# This workflow generates an AppImage package for Linux
# It must be executed manually
name: Generate AppImage

on:
#  push:
#    branches:
#      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment (wxWidgets dependencies)
        run: |
          sudo apt-get update
          # Install development packages depending on Ubuntu version
          if grep -q "Ubuntu 22.04" /etc/os-release; then
            sudo apt-get install -y cmake g++ libwxgtk3.0-gtk3-dev
          else
            sudo apt-get install -y cmake g++ libwxgtk3.2-dev libwxgtk-webview3.2-dev
          fi

      - name: Create build directory
        run: mkdir z_build-appimage

      - name: Configure CMake
        run: |
          cmake -G "Unix Makefiles" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -B ./z_build-appimage \
            -S .

      - name: Build application
        run: cmake --build ./z_build-appimage -- -j$(nproc)

      - name: Install files into AppDir
        run: |
          DESTDIR=./AppDir cmake --install ./z_build-appimage \
            --prefix /usr \
            --strip \
            --verbose

      - name: Download linuxdeploy
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

      - name: Generate AppImage
        id: appimage_gen
        run: |
          ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage
          # Find the exact filename and set it as an output variable
          appimage_file=$(ls *.AppImage)
          echo "APPIMAGE_FILE=$appimage_file" >> $GITHUB_OUTPUT

      - name: Upload AppImage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: AppImage
          path: ${{ steps.appimage_gen.outputs.APPIMAGE_FILE }}
