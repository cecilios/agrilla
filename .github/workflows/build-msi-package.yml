# This workflow generates the Windows installer (MSI)
# It must be executed manually
name: Build the MSI Package

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  # ... commented for now ...
  # push:
  #   branches: [ "main" ]

  # Runs this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      # Checkout AGrilla repo
      - name: Checkout AGrilla repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install build tools on Windows
      - name: Install build tools on Windows
        run: |
          choco install cmake -y
          choco install wixtoolset -y

      # Restore cached wxWidgets build
      - name: Cache wxWidgets build
        id: cache-wx
        uses: actions/cache@v4
        with:
          path: wxWidgets
          key: ${{ runner.os }}-wxwidgets-3.2.8-build-${{ hashFiles('build_wxwidgets/build/msw/wx_vc17.sln') }}
          restore-keys: |
            ${{ runner.os }}-wxwidgets-3.2.8-build-

      # Build wxWidgets from source if cache is missed
      - name: Build wxWidgets from source
        if: steps.cache-wx.outputs.cache-hit != 'true'
        run: |
          # Define WXWIN environment variable for this and subsequent steps
          echo "WXWIN=$env:GITHUB_WORKSPACE\wxWidgets" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Download wxWidgets source
          # Replace 'v3.2.8' with your desired version tag
          Invoke-WebRequest -Uri "https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.8/wxWidgets-3.2.8.zip -OutFile "wxWidgets.zip"
          Expand-Archive -Path "wxWidgets.zip" -DestinationPath .
          
          # Rename the extracted folder to a simple name
          Rename-Item -Path "wxWidgets-3.2.8" -NewName "wxWidgets"
          
          # Configure and build wxWidgets
          mkdir build_wxwidgets
          cd build_wxwidgets
          cmake ../wxWidgets -G "Visual Studio 17 2022" -A x64 -DwxBUILD_SHARED=OFF -DwxBUILD_TOOLKIT="msw" -DwxBUILD_MSW_OLESHELL=OFF -DwxBUILD_MSVC_STATIC_RUNTIME=ON
          
          msbuild /m /p:Configuration=Release wx_vc17.sln

      # Set WXWIN environment variable for subsequent steps when a cache hit occurs
      - name: Set WXWIN env variable on cache hit
        if: steps.cache-wx.outputs.cache-hit == 'true'
        run: echo "WXWIN=$env:GITHUB_WORKSPACE\wxWidgets" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Configure and build the main application
      - name: Configure and Build App
        run: |
          # Add WiX to PATH for this and subsequent steps
          $wixPath = (Get-ChildItem "C:\Program Files (x86)\WiX Toolset v*" | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName
          echo "$wixPath\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          mkdir build
          cd build
          
          # Configure CMake with wxWidgets path and static linkage
          cmake .. -G "Visual Studio 17 2022" -A x64 `
            -DwxWidgets_USE_LIBS="core;base;html" `
            -DwxWidgets_ROOT_DIR="$env:WXWIN" `
            -DwxWidgets_STATIC_LIBS=ON

          # Build the main application using CMake
          cmake --build . --config Release

      # Generate the MSI package
      - name: Generate the MSI package
        run: |
          # Set WIXTARGETS environment variable for MSBuild
          $wixPath = (Get-ChildItem "C:\Program Files (x86)\WiX Toolset v*" | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName
          echo "WIXTARGETS=$wixPath\Wix.targets" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # MSBuild command for the WiX installer project
          msbuild agrilla.wixproj /p:Configuration=Release
        working-directory: ${{ github.workspace }}

      # Upload MSI artifact
      - name: Upload MSI package
        uses: actions/upload-artifact@v4
        with:
          name: agrilla-msi-installer
          path: bin/Release/agrilla.msi
