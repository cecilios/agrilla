# This workflow generates the Windows installer (MSI)
# It must be executed manually
name: Build the MSI Package

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  # ... commented for now ...
  # push:
  #   branches: [ "main" ]

  # Runs this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout AGrilla repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build tools on Windows
        run: |
          choco install cmake -y
          choco install wixtoolset -y

      - name: Cache wxWidgets build
        id: cache-wx
        uses: actions/cache@v4
        with:
          path: wxWidgets
          key: ${{ runner.os }}-wxwidgets-v3.2.6
          restore-keys: |
            ${{ runner.os }}-wxwidgets-

      - name: Build wxWidgets from source
        if: steps.cache-wx.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Output "=== Cloning wxWidgets repo at v3.2.6 ==="
          if (Test-Path "wxWidgets") { 
            Write-Output "wxWidgets directory already exists. Removing..."
            Remove-Item -Recurse -Force "wxWidgets" 
          }
          git clone --branch 3.2 --depth 1 --recurse-submodules https://github.com/wxWidgets/wxWidgets.git wxWidgets

          Write-Output "=== Verifying wxWidgets clone ==="
          if (-not (Test-Path "wxWidgets\CMakeLists.txt")) {
            Write-Error "ERROR: wxWidgets clone is incomplete (CMakeLists.txt missing)"
            exit 1
          }

          Write-Output "Setting WXWIN to $env:GITHUB_WORKSPACE\wxWidgets"
          "WXWIN=$env:GITHUB_WORKSPACE\wxWidgets" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Write-Output "=== Configuring wxWidgets ==="
          if (-not (Test-Path "wxWidgets\build_msw")) { 
            mkdir "wxWidgets\build_msw" 
          }
          cd wxWidgets\build_msw

          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DwxBUILD_SHARED=OFF `
            -DwxBUILD_TOOLKIT="msw" `
            -DwxBUILD_MSVC_STATIC_RUNTIME=ON

          Write-Output "=== Building wxWidgets with CMake ==="
          cmake --build . --config Release

      - name: Set WXWIN env variable on cache hit
        if: steps.cache-wx.outputs.cache-hit == 'true'
        run: |
          echo "Cache hit for wxWidgets, setting WXWIN environment variable."
          echo "WXWIN=$env:GITHUB_WORKSPACE\wxWidgets" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configure and Build App
        shell: pwsh
        run: |
          Write-Output "=== Adding WiX to PATH ==="
          $wixPath = (Get-ChildItem "C:\Program Files (x86)\WiX Toolset v*" | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName
          Write-Output "Detected WiX path: $wixPath"
          "$wixPath\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          Write-Output "=== Ensuring build directory exists ==="
          if (-not (Test-Path "build")) { 
            mkdir build 
          }
          cd build

          Write-Output "=== Configuring application ==="
          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DwxWidgets_USE_LIBS="core;base;html" `
            -DwxWidgets_ROOT_DIR="$env:WXWIN" `
            -DwxWidgets_STATIC_LIBS=ON

          Write-Output "=== Building application ==="
          cmake --build . --config Release

      - name: Generate the MSI package
        shell: cmd
        run: |
          echo === Resolving MSBuild path using vswhere ===
          for /f "usebackq tokens=*" %%i in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe"`) do set MSBUILD_EXE=%%i

          echo Found MSBuild at: %MSBUILD_EXE%
          if not exist "%MSBUILD_EXE%" (echo ERROR: MSBuild not found && exit /b 1)

          echo === Setting WIXTARGETS ===
          for /f "usebackq tokens=*" %%j in (`dir /b /s "C:\Program Files (x86)\WiX Toolset v*\Wix.targets"`) do set WIXTARGETS=%%j

          echo WIXTARGETS=%WIXTARGETS% >> %GITHUB_ENV%
          echo Using WIXTARGETS: %WIXTARGETS%

          echo === Building MSI installer ===
          "%MSBUILD_EXE%" agrilla.wixproj /p:Configuration=Release
        working-directory: ${{ github.workspace }}

      - name: Upload MSI package
        uses: actions/upload-artifact@v4
        with:
          name: agrilla-msi-installer
          path: bin/Release/agrilla.msi

