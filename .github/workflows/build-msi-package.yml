# This workflow generates the Windows installer (MSI)
# It must be executed manually
name: Build the MSI Package

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  # ... commented for now ...
  # push:
  #   branches: [ "main" ]

  # Runs this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      # Checkout AGrilla repo
      - name: Checkout AGrilla repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install build tools on Windows
      - name: Install build tools on Windows
        run: |
          choco install cmake -y
          choco install wixtoolset -y

      # Restore cached wxWidgets build
      - name: Cache wxWidgets build
        id: cache-wx
        uses: actions/cache@v4
        with:
          path: wxWidgets # This is the directory that will be cached
          key: ${{ runner.os }}-wxwidgets-3.2.8-build-${{ hashFiles('build_wxwidgets/build/msw/wx_vc17.sln') }}
          restore-keys: |
            ${{ runner.os }}-wxwidgets-3.2.8-build-

      # Build wxWidgets from source if cache is missed
      - name: Build wxWidgets from source
        if: steps.cache-wx.outputs.cache-hit != 'true'
        shell: cmd # Use cmd shell for more reliable multi-line commands
        run: |
          REM Set WXWIN environment variable for wxWidgets source.
          echo "WXWIN=%GITHUB_WORKSPACE%\wxWidgets" > %GITHUB_ENV%
          
          REM Download wxWidgets source (v3.2.8).
          powershell -Command "Invoke-WebRequest -Uri 'https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.8/wxWidgets-3.2.8.zip' -OutFile 'wxWidgets.zip'"
          
          REM Expanding wxWidgets archive.
          powershell -Command "Expand-Archive -Path 'wxWidgets.zip' -DestinationPath '.' -Force"
          
          REM The Expand-Archive usually creates a folder like 'wxWidgets-3.2.8'.
          REM Rename it to 'wxWidgets' for consistent pathing.
          powershell -Command "Rename-Item -Path 'wxWidgets-3.2.8' -NewName 'wxWidgets' -ErrorAction Stop"

          REM Configure and build wxWidgets.
          cd wxWidgets
          mkdir build_msw
          cd build_msw
          
          REM CMake command for wxWidgets, using cmd's line continuation (^)
          cmake .. -G "Visual Studio 17 2022" -A x64 ^
            -DwxBUILD_SHARED=OFF ^
            -DwxBUILD_TOOLKIT="msw" ^
            -DwxBUILD_MSW_OLESHELL=OFF ^
            -DwxBUILD_MSVC_STATIC_RUNTIME=ON
          
          REM Add MSBuild to PATH for this step
          FOR /f "tokens=*" %%i IN ('where msbuild') DO set MSBUILD_PATH=%%i
          set PATH=%PATH%;%MSBUILD_PATH%\..
          
          REM Compiling wxWidgets.
          msbuild /m /p:Configuration=Release wx_vc17.sln

      # Set WXWIN environment variable for subsequent steps when a cache hit occurs
      # This ensures WXWIN is always defined for the application build step.
      - name: Set WXWIN env variable on cache hit
        if: steps.cache-wx.outputs.cache-hit == 'true'
        run: |
          echo "Cache hit for wxWidgets, setting WXWIN environment variable."
          echo "WXWIN=$env:GITHUB_WORKSPACE\wxWidgets" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Configure and build the main application
      - name: Configure and Build App
        run: |
          echo "Adding WiX Toolset to PATH."
          # Add WiX to PATH for this and subsequent steps
          $wixPath = (Get-ChildItem "C:\Program Files (x86)\WiX Toolset v*" | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName
          echo "$wixPath\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          mkdir build
          cd build
          
          echo "Configuring application with CMake, linking statically to wxWidgets."
          # Configure CMake with wxWidgets path and static linkage
          cmake .. -G "Visual Studio 17 2022" -A x64 `
            -DwxWidgets_USE_LIBS="core;base;html" `
            -DwxWidgets_ROOT_DIR="$env:WXWIN" `
            -DwxWidgets_STATIC_LIBS=ON

          echo "Building the main application using CMake."
          # Build the main application using CMake
          cmake --build . --config Release

      # Generate the MSI package
      - name: Generate the MSI package
        run: |
          echo "Setting WIXTARGETS environment variable."
          # Set WIXTARGETS environment variable for MSBuild
          $wixPath = (Get-ChildItem "C:\Program Files (x86)\WiX Toolset v*" | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName
          echo "WIXTARGETS=$wixPath\Wix.targets" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          echo "Building the MSI installer package."
          # MSBuild command for the WiX installer project
          msbuild agrilla.wixproj /p:Configuration=Release
        working-directory: ${{ github.workspace }}

      # Upload MSI artifact
      - name: Upload MSI package
        uses: actions/upload-artifact@v4
        with:
          name: agrilla-msi-installer
          path: bin/Release/agrilla.msi

